{% extends 'base.html.twig' %}

{% block title %}Home{% endblock %}


{% block stylesheets %}
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
{% endblock %}


{% block body %}
<style>
    html, body, .grid-container { height: 100%; margin: 0; }

.grid-container {
  display: grid;
  grid-template-columns: 4fr 1fr;
  grid-template-rows: 1fr;
  gap: 0px 0px;
  grid-template-areas:
    "item-left item-r";
}

.item-left {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-rows: 4.5fr 1fr;
  gap: 0px 0px;
  grid-template-areas:
    ". . ."
    ". . .";
  grid-area: item-left;
}

.item-r {
    
    background-color: rgb(0, 0, 0);
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: 1fr 1fr 1fr;
    gap: 0px 0px;
    grid-template-areas:
        ". . ."
        ". mid ."
        ". . .";
    grid-area: item-r;
}

/* For presentation only, no need to copy the code below */
.grid-container * {
  /*border: 1px solid red;*/
  position: relative;
}

.grid-container *:after {
  /*content:attr(class);*/
  position: absolute;
  top: 0;
  left: 0;
}

.center{
    background-color: rgb(46, 45, 45);
    grid-column: 1/4;
    grid-row: 1/3;
}

.mid { 
    grid-area: mid;
}

.btn-Ajouter{
    margin-top: 10vh;
}

.btn {
    background-color: red;
    display:block;
    height: 100px;
    width: 100px;
    border-radius: 50%;
    border: 10px solid white;
    color: red;
    cursor: pointer;
    outline:none;
}

.btn:active{
    background-color: white;
}

</style>
 <div class="grid-container" onload="loadStart">
      <div class="item-left">
        <div class="center" id="camera">
          <video id="video" style="transform: rotate(180deg); width:90%">video stream not available</video>
          <canvas id="canvas">
          </canvas>
        </div>
      </div>
      <div class="item-r">
        <div class="mid">
          <div class="btn-Ajouter">
            <div>
              <input type="button" class="btn" id="clickMe"/>
            </div>
          </div>
        </div>
      </div>
    </div>
{% endblock %}

{% block javascripts %}


  function loadStart()
  {
    //crÃ©er un avis vide
    //post
  }


 (function() {
  // The width and height of the captured photo. We will set the
  // width to the value defined here, but the height will be
  // calculated based on the aspect ratio of the input stream.

  var width = 320;    // We will scale the photo width to this
  var height = 0;     // This will be computed based on the input stream

  // |streaming| indicates whether or not we're currently streaming
  // video from the camera. Obviously, we start at false.

  var streaming = false;

  // The various HTML elements we need to configure or control. These
  // will be set by the startup() function.

  var video = null;
  var canvas = null;
  var startbutton = null;


  //list images enregistrer
  let listPictures = [];

  function startup() {
    video = document.getElementById('video');
    canvas = document.getElementById('canvas');
    startbutton = document.getElementById('clickMe');

    navigator.mediaDevices.getUserMedia({video: true, audio: false})
    .then(function(stream) {
      video.srcObject = stream;
      video.play();
    })
    .catch(function(err) {
      console.log("An error occurred: " + err);
    });

    video.addEventListener('canplay', function(ev){
      if (!streaming) {
        height = video.videoHeight / (video.videoWidth/width);
      
        // Firefox currently has a bug where the height can't be read from
        // the video, so we will make assumptions if this happens.
      
        if (isNaN(height)) {
          height = width / (4/3);
        }
      
        video.setAttribute('width', width);
        video.setAttribute('height', height);
        canvas.setAttribute('width', width);
        canvas.setAttribute('height', height);
        streaming = true;
      }
    }, false);

    startbutton.addEventListener('click', function(ev){
      takepicture();
      ev.preventDefault();
    }, false);
    
    clearphoto();
  }

  // Fill the photo with an indication that none has been
  // captured.
  function clearphoto() {
    var context = canvas.getContext('2d');
    context.fillStyle = "#AAA";
    context.fillRect(0, 0, canvas.width, canvas.height);

    var data = canvas.toDataURL('image/png');
  }
  
  // Capture a photo by fetching the current contents of the video
  // and drawing it into a canvas, then converting that to a PNG
  // format data URL. By drawing it on an offscreen canvas and then
  // drawing that to the screen, we can change its size and/or apply
  // other changes before drawing it.
  function takepicture() {
    var context = canvas.getContext('2d');
    if (width && height) {
      canvas.width = width;
      canvas.height = height;
      context.drawImage(video, 0, 0, width, height);
    
      var data = canvas.toDataURL('image/png');
      ckickTakePicture(data)
    } else {
      clearphoto();
    }
  }

  function ckickTakePicture(pictures)
  {

    swal({
    title: "Enregistrements",
    text: "voulez-vous garder la photo ?",
    icon: pictures,
    buttons: {
      cancel: "Cancel",
      catch: {
        text: "oui",
        value: "save",
        },
      },
    })
    .then((value) => {
      switch (value) { 
      case "save":
        swal("Enregistrer!", "success");
        //retourlist(pictures);
        break;
      }
    });
  }

  function retourlist(pictures)
  {
    
    listPictures.push(pictures);
    console.log(listPictures[0]);
  }

  // Set up our event listener to run the startup process
  // once loading is complete.
  window.addEventListener('load', startup, false);
})();

{% endblock %}
